<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1617686159542" id="402849367892415d0178a59be0b60094" language="beanshell" modified="1617707390725" name="Custom Approval Assignment Rule" type="ApprovalAssignment">
  <Signature returnType="null">
    <Inputs>
      <Argument type="log">
        <Description>

          The log object associated with the SailPointContext.

        </Description>
      </Argument>
      <Argument type="context">
        <Description>

          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.

        </Description>
      </Argument>
      <Argument type="approvals">
        <Description>

          List of approvals generated by the approvalScheme, maybe null if there were no

          approvals enabled.

        </Description>
      </Argument>
      <Argument type="approvalSet">
        <Description>

          Representation of the cart, also found on the approvals generated by the

          default schemes.

        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument type="newApprovals">
        <Description>

          Return a lIst of Workflow.Approval objects that should be included

          during the approval process.

        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
  System.out.println("Starting Approval Assignement Rule ========> ");

  import sailpoint.object.Workflow;

  import sailpoint.object.Workflow.Approval;

  import sailpoint.object.Identity;

  import org.apache.commons.logging.Log;

  import org.apache.commons.logging.LogFactory;

  import sailpoint.object.Application;

  import sailpoint.api.IdentityService;

  import sailpoint.object.Link;

  import sailpoint.api.ManagedAttributer;

  import sailpoint.object.ApprovalItem;

  import sailpoint.object.ManagedAttribute;

  import sailpoint.tools.Util;

  import sailpoint.object.ApprovalSet;

  import sailpoint.tools.xml.XMLObjectFactory;

  import sailpoint.object.Workflow.Arg;

  import sailpoint.object.*;

  import java.util.ArrayList;

  import java.util.List;

  import sailpoint.workflow.IdentityApprovalGenerator;

  import java.util.*;

  Identity targetUser = context.getObjectByName(Identity.class, identityName);

  System.out.println("Target User ==>  "+targetUser);

  Identity manager = targetUser.getManager();


  List newApproval = new ArrayList();
  System.out.println(" approvalSet    ==>"+approvalSet.toXml());

  for ( Approval approval : approvals ) {
    if ( approval != null ) {
      System.out.println("approval----"+approval.toXml());
    }
  }
  Map approvalMap = new HashMap();



  List newItem = new ArrayList();

  for (ApprovalItem item : approvalSet.getItems())

  {

    System.out.println("Found Approval Item ========> "+item.toXml());

    if (! item.isRejected())

    {

      String entApprovalScheme;



      String itemAppName = item.getApplicationName();

      System.out.println("itemAppName  ==>  "+itemAppName);



      String itemName = item.getName();

      System.out.println("itemName  ==>  "+ itemName );



      String itemValue;

      Object itemValueObj =  item.getValue();



      // Multi-value check

      if (itemValueObj instanceof String)

        itemValue = (String) itemValueObj;

      else

        itemValue = itemValueObj.get(0);  



      if (null != itemAppName) {

        itemDisplayName = item.getDisplayName();

        System.out.println("itemDisplayName ==> "+itemDisplayName);

      }



      if ( null != itemDisplayName &amp;&amp; itemDisplayName.equals("Role")) {

        System.out.println("In Side Role-------- ==> "+itemValue);



        String roleName = itemValue;

        //Object roelName= item.getValue();

        System.out.println("Role Name Found ==> "+roleName);



        Bundle role = context.getObjectByName(Bundle.class, roleName);

        System.out.println("Bundle Found Found in xml ==> "+role.toXml());
        String roleOwnerName = "";
        if(role !=null){
          Identity roleOwnwer = role.getOwner();
          if(roleOwnwer != null){
            roleOwnerName = roleOwnwer.getName()+","+"Bob Fields";;
            System.out.println("role owner null check if block--- "+roleOwnerName);
          }else{

            roleOwnerName = "Alan Snow"+","+"Bob Fields";
            System.out.println("role owner null check else block--- "+roleOwnerName);
          }
        }
        // Getting New Approvar's Name from Extended Attribute stored under stageTwoApprover on Role

        entApprovalScheme =  roleOwnerName;

        System.out.println("secondStageRoleApprover  ==>  "+ entApprovalScheme);

      }else{

        Application app = context.getObjectByName(Application.class, itemAppName);

        System.out.println("app name from itemAppName  ==>  "+ app);

        ManagedAttribute ma = ManagedAttributer.get(context, app, itemName, itemValue);

        System.out.println("ManagedAttribute  ==>  "+ma);

        // Getting New Approvar's Name from Extended Attribute stored under stageTwoApprover on Entitlement

        /*entApprovalScheme = ma.getAttribute("entApprovalScheme");

        System.out.println("entApprovalScheme  ==>  "+entApprovalScheme);

        String secondStageApprover = ma.getAttribute("secondStageApprover");*/
        entApprovalScheme = "Chris Stephens"+","+"Ann Parson";

        System.out.println("secondStageApprover  ==>  "+ secondStageApprover);

      }



      if (null != entApprovalScheme &amp;&amp; !entApprovalScheme.isEmpty())

      {

        for(String approvalOwner :  entApprovalScheme.split(",")){
          // Build approval map of approver to ApprovalSet
          if(Util.isNotNullOrEmpty(approvalOwner)){

            ApprovalSet newSet = approvalMap.get(approvalOwner);

            if (newSet == null)

            {

              newSet = new ApprovalSet();

            }

            newSet.add(XMLObjectFactory.getInstance().clone(item, context));



            System.out.println("Adding First Stage Approvar  ==>  "+ entApprovalScheme);
            System.out.println("newSet  ==>  "+ newSet.toXml());


            approvalMap.put(approvalOwner, newSet);

          }
        }
      }



    }

  }

  // Generate the approval list from the approval map

  IdentityApprovalGenerator iag = new IdentityApprovalGenerator(wfcontext);

  newApprovals = iag.buildApprovalsFromMap(approvalMap, "First Stage Approval From Entitlement");  // Second argument is used in the work item description
  List list = new ArrayList();
  Approval approvals2 = new Approval();
  for (Approval newApproval : newApprovals) {

    System.out.println("new Approvals----:"+newApproval.toXml());
    list.add(newApproval);

  } 
  approvals2.setChildren(list);
  approvals2.setMode("parallelPoll");
  List list2 = new ArrayList();
  list2.add(approvals2);
  // Set the email template for each approval

  /*  for (Approval newApproval : newApprovals) {

    List args = approval.getArgs();

    Workflow.Arg emailTemplateArg = new Workflow.Arg("LCM Identity Update Approval", managerEmailTemplate);

    args.add(emailTemplateArg);

    }  */

  //return approvalSetNew;

  return list2;

  </Source>
</Rule>
