<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE TaskDefinition PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<TaskDefinition created="" executor="sailpoint.reporting.LiveReportExecutor" id=""  name="EntitlementsDetails" progressMode="Percentage" resultAction="Rename" subType="Role Management Reports" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="TaskDefinition.runLengthAverage" value="6"/>
      <entry key="TaskDefinition.runLengthTotal" value="6"/>
      <entry key="TaskDefinition.runs" value="1"/>
      <entry key="report">
        <value>
          <LiveReport title="Identity Roles Report">
            <DataSource objectType="ManagedAttribute" type="Filter">
              <QueryParameters>
                <Parameter argument="managedAttribute" property="value"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="entitlement" header="Entitlement" property="value" sortable="true" width="110"/>
              <ReportColumnConfig field="itRoles" header="ITRoles" property="value" scriptArguments="value" sortable="true" width="110">
                <RenderScript>
                  <Source>
                    import sailpoint.object.*;
                    import java.util.ArrayList;
                    import java.util.List;

                    import sailpoint.api.SailPointContext;
                    import sailpoint.object.Bundle;
                    import sailpoint.object.Filter;
                    import sailpoint.object.Filter.LeafFilter;
                    import sailpoint.object.Profile;
                    import sailpoint.object.QueryOptions;

                    List listObj = new ArrayList();
                    List value = new ArrayList();
                    String entitlement = scriptArgs.get("value");
                    Filter filter = Filter.eq("type", "it");
                    QueryOptions qo = new QueryOptions();
                    qo.add(filter);
                    List itRoles = context.getObjects(Bundle.class, qo);
                    List entitlementsList ;
                    for (Bundle bundle : itRoles) {
                    entitlementsList = new ArrayList();
                    List profiles = bundle.getProfiles();
                    for (Profile bundle2 : profiles) {
                    List constraints = bundle2.getConstraints();
                    for (LeafFilter bundle3 : constraints) {
                    value = bundle3.getValue();
                    if(value.contains(entitlement)) {
                    listObj.add(bundle.getName());
                    }
                    }
                    }
                    }

                    return listObj;

                  </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="businessRole" header="BusinessRole" property="value" scriptArguments="value" sortable="true" width="110">
                <RenderScript>
                  <Source>
                    import java.util.ArrayList;
                    import java.util.List;
                    import sailpoint.api.SailPointContext;
                    import sailpoint.object.Bundle;
                    import sailpoint.object.*;
                    import sailpoint.object.Identity;
                    import sailpoint.object.QueryOptions;
                    import sailpoint.tools.GeneralException; 
                    import sailpoint.object.*;
                    import java.util.ArrayList;
                    import java.util.List;
                    import sailpoint.api.SailPointContext;
                    import sailpoint.object.Bundle;
                    import sailpoint.object.Filter;
                    import sailpoint.object.Filter.LeafFilter;
                    import sailpoint.object.Profile;
                    import sailpoint.object.QueryOptions;

                    List listObj = new ArrayList();
                    List value = new ArrayList();
                    String entitlement = scriptArgs.get("value");
                    Filter filter = Filter.eq("type", "it");
                    QueryOptions qo = new QueryOptions();
                    qo.add(filter);

                    List itRoles = context.getObjects(Bundle.class, qo);
                    List entitlementsList ;
                    for (Bundle bundle : itRoles) {
                    entitlementsList = new ArrayList();
                    List profiles = bundle.getProfiles();
                    for (Profile bundle2 : profiles) {
                    List constraints = bundle2.getConstraints();

                    for (LeafFilter bundle3 : constraints) {

                    value = bundle3.getValue();
                    if(value.contains(entitlement)) {
                    listObj.add(bundle);
                    }


                    }

                    }


                    }

                    Filter bus = Filter.eq("type", "business");
                    QueryOptions qopt = new QueryOptions();
                    qopt.add(bus);

                    List businessRoles = context.getObjects(Bundle.class, qopt);
                    List excluded = new ArrayList();
                    boolean test = false;

                    List itRoleNames = new ArrayList();
                    for (Bundle itRole : listObj) {
                    for (Bundle businessRole : businessRoles) {
                    List requirements = businessRole.getRequirements();
                    List permits = businessRole.getPermits();
                    if(requirements.size() > 0 || permits.size() > 0){
                    if(requirements.contains(itRole) || permits.contains(itRole)) {
                    itRoleNames.add(businessRole.getName());
                    test = true;
                    break;

                    }
                    }
                    }
                    if(!test){

                    }
                    test = false;
                    }

                    return itRoleNames;

                  </Source>
                </RenderScript>
              </ReportColumnConfig>
              <ReportColumnConfig field="owner" header="Owner" property="value" scriptArguments="value" sortable="true" width="110">
                <RenderScript>
                  <Source>
                    import sailpoint.object.*;
                    Filter entitlement = Filter.eq("value", scriptArgs.get("value"));
                    ManagedAttribute object = context.getUniqueObject(ManagedAttribute.class, entitlement);

                    Identity owner = object.getOwner();
                    if(owner != null) {
                    return owner.getName();
                    }
                  </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays the roles that each identity is a member of.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" id="8a8ae41b6dba255f016dba2588fb005d" name="FullAccessIdentityRoleReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="managedAttribute" type="ManagedAttribute">
        <Description>rept_input_user_report_group_definition</Description>
      </Argument>
    </Inputs>
  </Signature>
</TaskDefinition>
